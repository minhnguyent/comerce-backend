// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using clothes_backend.Service;

#nullable disable

namespace clothesbackend.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230309125041_sadf")]
    partial class sadf
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "33081dd1-b8e0-40c3-9fd0-fe38267de494",
                            ConcurrencyStamp = "9add15e9-c379-4e23-97de-2b56ddc9d525",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ada17e8a-86a9-4b89-8baa-e6da0ca4c053",
                            RoleId = "33081dd1-b8e0-40c3-9fd0-fe38267de494"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("clothes_backend.Entities.Cart.Order", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("number")
                        .HasColumnType("float");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("size")
                        .HasColumnType("float");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("clothes_backend.Entities.Cart._Cart", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("clientId")
                        .HasColumnType("int");

                    b.Property<string>("color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("number")
                        .HasColumnType("float");

                    b.Property<string>("product")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("size")
                        .HasColumnType("float");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("clientId");

                    b.ToTable("carts");

                    b.HasData(
                        new
                        {
                            id = 4,
                            clientId = 1,
                            color = "red",
                            number = 1.0,
                            product = "Mens Cotton Jacket ",
                            size = 38.0,
                            status = 0
                        },
                        new
                        {
                            id = 2,
                            clientId = 1,
                            color = "green",
                            number = 1.0,
                            product = "Mens Cotton Jacket ",
                            size = 40.0,
                            status = 0
                        },
                        new
                        {
                            id = 3,
                            clientId = 2,
                            color = "red",
                            number = 1.0,
                            product = "Mens Cotton Jacket ",
                            size = 38.0,
                            status = 0
                        });
                });

            modelBuilder.Entity("clothes_backend.Entities.Client.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ada17e8a-86a9-4b89-8baa-e6da0ca4c053",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "157a2d3c-6fe4-4b69-bc6d-05ae3fb1a11b",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEEgHUL2GAUw8BkSrF2QY/OnIBGdcBQ7zDpsiyZKUTZs7jsYItd4HIDUWkmJjWUbgQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07d86591-ffa1-4676-9801-28b3d3db68a0",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            firstName = "admin",
                            lastName = "admin"
                        });
                });

            modelBuilder.Entity("clothes_backend.Entities.Client._Client", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("clients");

                    b.HasData(
                        new
                        {
                            id = 1,
                            address = "nha1",
                            firstName = "truong",
                            lastName = "minh nguyen",
                            phoneNumber = "123456666"
                        },
                        new
                        {
                            id = 2,
                            address = "nha2",
                            firstName = "henry",
                            lastName = "Lord",
                            phoneNumber = "222333111"
                        },
                        new
                        {
                            id = 3,
                            address = "nha3",
                            firstName = "Anatamo",
                            lastName = "Daisuki",
                            phoneNumber = "3331112222"
                        });
                });

            modelBuilder.Entity("clothes_backend.Entities.Dal.Attri", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("number")
                        .HasColumnType("float");

                    b.Property<double>("size")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.ToTable("attries");

                    b.HasData(
                        new
                        {
                            id = 1,
                            color = "red",
                            number = 2.0,
                            size = 38.0
                        },
                        new
                        {
                            id = 2,
                            color = "green",
                            number = 3.0,
                            size = 40.0
                        },
                        new
                        {
                            id = 3,
                            color = "red",
                            number = 1.0,
                            size = 39.0
                        },
                        new
                        {
                            id = 4,
                            color = "red",
                            number = 2.0,
                            size = 41.0
                        },
                        new
                        {
                            id = 5,
                            color = "yellow",
                            number = 2.0,
                            size = 0.0
                        },
                        new
                        {
                            id = 6,
                            color = "red",
                            number = 5.0,
                            size = 40.0
                        },
                        new
                        {
                            id = 7,
                            color = "pink",
                            number = 6.0,
                            size = 38.0
                        },
                        new
                        {
                            id = 8,
                            color = "blue",
                            number = 4.0,
                            size = 40.0
                        });
                });

            modelBuilder.Entity("clothes_backend.Entities.Dal.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "ao nam"
                        },
                        new
                        {
                            id = 2,
                            name = "quan nam"
                        },
                        new
                        {
                            id = 3,
                            name = "ao nu"
                        },
                        new
                        {
                            id = 4,
                            name = "quan nu"
                        },
                        new
                        {
                            id = 5,
                            name = "vay nu"
                        },
                        new
                        {
                            id = 7,
                            name = "tui xach"
                        },
                        new
                        {
                            id = 8,
                            name = "giay"
                        });
                });

            modelBuilder.Entity("clothes_backend.Entities.Dal.Product", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("categoryID")
                        .HasColumnType("int");

                    b.Property<int>("count")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<double>("rate")
                        .HasColumnType("float");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("categoryID");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            id = 1,
                            categoryID = 3,
                            count = 0,
                            name = "Light Murrey Sleeveless Silk Top",
                            price = 1196000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 2,
                            categoryID = 3,
                            count = 0,
                            name = "Purple Floral Silk Shirt",
                            price = 1296000.0,
                            rate = 0.0,
                            title = "Jewelery"
                        },
                        new
                        {
                            id = 3,
                            categoryID = 3,
                            count = 0,
                            name = "Bowtie Top",
                            price = 1096000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 4,
                            categoryID = 3,
                            count = 0,
                            name = "Nude Illusion Neckline Raw Top",
                            price = 1996000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 5,
                            categoryID = 3,
                            count = 0,
                            name = "Beige Stripe Woven Top ",
                            price = 1096000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 6,
                            categoryID = 3,
                            count = 0,
                            name = "Light Green Stripe Woven Top",
                            price = 1096000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 7,
                            categoryID = 3,
                            count = 0,
                            name = "Ochre Stripe Woven Waistcoat",
                            price = 1396000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 8,
                            categoryID = 3,
                            count = 0,
                            name = "Black Cropped Woven Top",
                            price = 1396000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 9,
                            categoryID = 3,
                            count = 0,
                            name = "Bateau Collar Silk Top",
                            price = 1196000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 10,
                            categoryID = 3,
                            count = 0,
                            name = "Bowtie Top",
                            price = 1296000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 11,
                            categoryID = 3,
                            count = 0,
                            name = "Silk Shirt",
                            price = 1296000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 12,
                            categoryID = 3,
                            count = 0,
                            name = "White Butterfly Bowtie Top",
                            price = 1196000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 13,
                            categoryID = 4,
                            count = 0,
                            name = "Dark Violet Split-front Wide Leg Raw Pants",
                            price = 1296000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 14,
                            categoryID = 4,
                            count = 0,
                            name = "Dark Violet Flare Pants",
                            price = 1296000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 15,
                            categoryID = 4,
                            count = 0,
                            name = "Mallard Green Wide Leg Silk Pants",
                            price = 1296000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 16,
                            categoryID = 4,
                            count = 0,
                            name = "Moss Green Wide Leg Silk Pants",
                            price = 1296000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 17,
                            categoryID = 4,
                            count = 0,
                            name = "Cream Wide Leg Silk Pants",
                            price = 1296000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 18,
                            categoryID = 4,
                            count = 0,
                            name = "Brick Silk Pants",
                            price = 1296000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 19,
                            categoryID = 4,
                            count = 0,
                            name = "Dresspants",
                            price = 1096000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 20,
                            categoryID = 4,
                            count = 0,
                            name = "Nude Wide Leg Raw Pants",
                            price = 1296000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 21,
                            categoryID = 4,
                            count = 0,
                            name = "Beige Stripe Wide Leg Woven Pants",
                            price = 1296000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 22,
                            categoryID = 4,
                            count = 0,
                            name = "Light Green Stripe Woven Pants",
                            price = 1296000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 23,
                            categoryID = 4,
                            count = 0,
                            name = "Green Stripe Wide Leg Woven Pants",
                            price = 1496000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 24,
                            categoryID = 4,
                            count = 0,
                            name = "Ochre Stripe Wide Leg Woven Pants",
                            price = 1296000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 25,
                            categoryID = 5,
                            count = 0,
                            name = "White Daisy Midi Brocade Dress",
                            price = 3296000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 26,
                            categoryID = 5,
                            count = 0,
                            name = "White Queen Anne Neck Midi Woven Dress",
                            price = 2496000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 27,
                            categoryID = 5,
                            count = 0,
                            name = "Yellow Strappy Midi Woven Dress",
                            price = 2496000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 28,
                            categoryID = 5,
                            count = 0,
                            name = "Red Chrysanthemum Sleeveless Midi Dress",
                            price = 2996000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 29,
                            categoryID = 5,
                            count = 0,
                            name = "Multi-coloured Chrysanthemum Mini Dress",
                            price = 2996000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 30,
                            categoryID = 5,
                            count = 0,
                            name = "Yellow Chrysanthemum Mini Dress",
                            price = 2996000.0,
                            rate = 0.0,
                            title = "Women"
                        },
                        new
                        {
                            id = 31,
                            categoryID = 1,
                            count = 0,
                            name = "Áo Polo nam Pique Cotton USA thấm hút tối đa (kẻ sọc) - Vàng sọc đen",
                            price = 229000.0,
                            rate = 0.0,
                            title = "Men"
                        },
                        new
                        {
                            id = 32,
                            categoryID = 1,
                            count = 0,
                            name = "Áo Polo thể thao nam ProMax-S1 Logo thoáng khí - Xanh Navy",
                            price = 239000.0,
                            rate = 0.0,
                            title = "Men"
                        },
                        new
                        {
                            id = 33,
                            categoryID = 1,
                            count = 0,
                            name = "Áo Polo nam Café - khử mùi hiệu quả - Xanh aqua",
                            price = 329000.0,
                            rate = 0.0,
                            title = "Men"
                        },
                        new
                        {
                            id = 34,
                            categoryID = 1,
                            count = 0,
                            name = "Áo khoác nỉ nam For Winter (có mũ trùm tiện lợi) - Đen",
                            price = 349000.0,
                            rate = 0.0,
                            title = "Men"
                        },
                        new
                        {
                            id = 35,
                            categoryID = 1,
                            count = 0,
                            name = "Áo Polo nam co giãn công nghệ Graphene - Xanh bóng đêm",
                            price = 329000.0,
                            rate = 0.0,
                            title = "Men"
                        },
                        new
                        {
                            id = 36,
                            categoryID = 1,
                            count = 0,
                            name = "Áo thun nam Cotton Compact phiên bản Premium chống nhăn - Xanh Navy",
                            price = 259000.0,
                            rate = 0.0,
                            title = "Men"
                        },
                        new
                        {
                            id = 37,
                            categoryID = 2,
                            count = 0,
                            name = "Quần shorts chạy bộ Advanced Fast & Free Run",
                            price = 399000.0,
                            rate = 0.0,
                            title = "Men"
                        },
                        new
                        {
                            id = 38,
                            categoryID = 2,
                            count = 0,
                            name = "Quần Jeans Clean Denim dáng Regular S2 - Xanh garment",
                            price = 599000.0,
                            rate = 0.0,
                            title = "Men"
                        },
                        new
                        {
                            id = 39,
                            categoryID = 2,
                            count = 0,
                            name = "Quần short nam thể thao 7",
                            price = 199000.0,
                            rate = 0.0,
                            title = "Men"
                        },
                        new
                        {
                            id = 40,
                            categoryID = 2,
                            count = 0,
                            name = "Quần Jeans Clean Denim dáng Regular S3 - Xanh đậm",
                            price = 599000.0,
                            rate = 0.0,
                            title = "Men"
                        },
                        new
                        {
                            id = 41,
                            categoryID = 2,
                            count = 0,
                            name = "Quần Jogger nam túi hộp Cargo Outdoor - Xám",
                            price = 329000.0,
                            rate = 0.0,
                            title = "Men"
                        },
                        new
                        {
                            id = 42,
                            categoryID = 2,
                            count = 0,
                            name = "Quần short nam thể thao Recycle 7 thoáng khí - Xanh navy",
                            price = 179000.0,
                            rate = 0.0,
                            title = "Men"
                        },
                        new
                        {
                            id = 43,
                            categoryID = 7,
                            count = 0,
                            name = "Ví Nam Tommy Hilfiger Mens Ranger Passcase Brown 5673/02 Màu Nâu",
                            price = 1090000.0,
                            rate = 0.0,
                            title = "Jewelery"
                        },
                        new
                        {
                            id = 44,
                            categoryID = 7,
                            count = 0,
                            name = "úi Đeo Chéo Charles & Keith Croc-Effect Chain Strap Crossbody Bag CK2-80700998-4 Màu Đen",
                            price = 1860000.0,
                            rate = 0.0,
                            title = "Jewelery"
                        },
                        new
                        {
                            id = 45,
                            categoryID = 7,
                            count = 0,
                            name = "Túi Xách Charles & Keith Scarf-Wrapped Top Handle",
                            price = 1880000.0,
                            rate = 0.0,
                            title = "Jewelery"
                        },
                        new
                        {
                            id = 46,
                            categoryID = 7,
                            count = 0,
                            name = "Ví Nam Tommy Hilfiger Men's Thin Sleek Casual Bifold Wallet with 6 Credit Card Pockets And Removable Id Window",
                            price = 1100000.0,
                            rate = 0.0,
                            title = "Jewelery"
                        },
                        new
                        {
                            id = 47,
                            categoryID = 7,
                            count = 0,
                            name = "Túi Xách MLB Monogram Embossed Hobo Bag New York Yankees 3ABQS022N-50CRS Màu Trắng",
                            price = 2800000.0,
                            rate = 0.0,
                            title = "Jewelery"
                        },
                        new
                        {
                            id = 48,
                            categoryID = 7,
                            count = 0,
                            name = "Ví Nam Tommy Hilfiger Men's Thin Sleek Casual Bifold Wallet Black Dore",
                            price = 1300000.0,
                            rate = 0.0,
                            title = "Jewelery"
                        },
                        new
                        {
                            id = 49,
                            categoryID = 8,
                            count = 0,
                            name = "Giày Gucci Ace Embroidered Sneaker White Leather",
                            price = 14800000.0,
                            rate = 0.0,
                            title = "Jewelery"
                        },
                        new
                        {
                            id = 50,
                            categoryID = 8,
                            count = 0,
                            name = "Giày MLB Big Ball Chunky P Boston",
                            price = 1920000.0,
                            rate = 0.0,
                            title = "Jewelery"
                        },
                        new
                        {
                            id = 51,
                            categoryID = 8,
                            count = 0,
                            name = "Giày Thể Thao Nike Court Vision Low Next Nature",
                            price = 1980000.0,
                            rate = 0.0,
                            title = "Jewelery"
                        },
                        new
                        {
                            id = 52,
                            categoryID = 8,
                            count = 0,
                            name = "Giày MLB Big Ball Chunky P",
                            price = 1890000.0,
                            rate = 0.0,
                            title = "Jewelery"
                        },
                        new
                        {
                            id = 53,
                            categoryID = 8,
                            count = 0,
                            name = "Giày Thể Thao Louis Vuitton LV Trainer Màu Đen",
                            price = 48900000.0,
                            rate = 0.0,
                            title = "Jewelery"
                        },
                        new
                        {
                            id = 54,
                            categoryID = 8,
                            count = 0,
                            name = "Giày Thể Thao MLB Chunky Liner Boston Red",
                            price = 3350000.0,
                            rate = 0.0,
                            title = "Jewelery"
                        });
                });

            modelBuilder.Entity("clothes_backend.Entities.Dal.Stock", b =>
                {
                    b.Property<int>("productID")
                        .HasColumnType("int");

                    b.Property<int>("attriID")
                        .HasColumnType("int");

                    b.HasKey("productID", "attriID");

                    b.HasIndex("attriID");

                    b.ToTable("Stock", (string)null);

                    b.HasData(
                        new
                        {
                            productID = 1,
                            attriID = 1
                        },
                        new
                        {
                            productID = 1,
                            attriID = 2
                        },
                        new
                        {
                            productID = 1,
                            attriID = 6
                        },
                        new
                        {
                            productID = 1,
                            attriID = 7
                        },
                        new
                        {
                            productID = 2,
                            attriID = 3
                        },
                        new
                        {
                            productID = 2,
                            attriID = 4
                        },
                        new
                        {
                            productID = 3,
                            attriID = 5
                        },
                        new
                        {
                            productID = 3,
                            attriID = 2
                        },
                        new
                        {
                            productID = 4,
                            attriID = 6
                        },
                        new
                        {
                            productID = 4,
                            attriID = 8
                        },
                        new
                        {
                            productID = 5,
                            attriID = 1
                        },
                        new
                        {
                            productID = 5,
                            attriID = 3
                        },
                        new
                        {
                            productID = 6,
                            attriID = 4
                        },
                        new
                        {
                            productID = 6,
                            attriID = 5
                        },
                        new
                        {
                            productID = 7,
                            attriID = 6
                        },
                        new
                        {
                            productID = 7,
                            attriID = 7
                        },
                        new
                        {
                            productID = 8,
                            attriID = 8
                        },
                        new
                        {
                            productID = 8,
                            attriID = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("clothes_backend.Entities.Client.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("clothes_backend.Entities.Client.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clothes_backend.Entities.Client.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("clothes_backend.Entities.Client.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("clothes_backend.Entities.Cart.Order", b =>
                {
                    b.HasOne("clothes_backend.Entities.Client.User", "user")
                        .WithMany("Orders")
                        .HasForeignKey("userId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("clothes_backend.Entities.Cart._Cart", b =>
                {
                    b.HasOne("clothes_backend.Entities.Client._Client", "client")
                        .WithMany("carts")
                        .HasForeignKey("clientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");
                });

            modelBuilder.Entity("clothes_backend.Entities.Dal.Product", b =>
                {
                    b.HasOne("clothes_backend.Entities.Dal.Category", "category")
                        .WithMany("products")
                        .HasForeignKey("categoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("clothes_backend.Entities.Dal.Stock", b =>
                {
                    b.HasOne("clothes_backend.Entities.Dal.Attri", "attri")
                        .WithMany("stocks")
                        .HasForeignKey("attriID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clothes_backend.Entities.Dal.Product", "product")
                        .WithMany("stocks")
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("attri");

                    b.Navigation("product");
                });

            modelBuilder.Entity("clothes_backend.Entities.Client.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("clothes_backend.Entities.Client._Client", b =>
                {
                    b.Navigation("carts");
                });

            modelBuilder.Entity("clothes_backend.Entities.Dal.Attri", b =>
                {
                    b.Navigation("stocks");
                });

            modelBuilder.Entity("clothes_backend.Entities.Dal.Category", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("clothes_backend.Entities.Dal.Product", b =>
                {
                    b.Navigation("stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
